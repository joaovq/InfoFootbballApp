plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs'
    id ("com.google.devtools.ksp")
    id "kotlin-kapt"
    id("com.google.dagger.hilt.android")
}
Properties properties = new Properties();
properties.load(project.rootProject.file("api-key.properties").newDataInputStream())
def apiKey = properties.getProperty("API_KEY_FOOTBALL_API")

android {
    namespace 'br.com.joaovitorqueiroz.footballapi'
    compileSdk 33

    defaultConfig {
        applicationId "br.com.joaovitorqueiroz.footballapi"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "br.com.joaovitorqueiroz.footballapi.CustomTestRunnerInfoFootball"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug{
            buildConfigField("String", "API_KEY_FOOTBALL", apiKey)
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures{
        viewBinding true
        dataBinding true
    }
    dataBinding{
        enabled = true
    }
    testOptions {
        // Used for Unit testing Android dependent elements in /test folder
        unitTests.includeAndroidResources  = true
        unitTests.returnDefaultValues = true
    }
}


dependencies {
    implementation "androidx.core:core-ktx:$ktx_core_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    //Coil (https://github.com/coil-kt/coil)
    implementation("io.coil-kt:coil:$coil_version")
    implementation("io.coil-kt:coil-svg:$coil_svg_version")
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayout_version"
//    Test's
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$ext_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$expresso_version"
    debugImplementation("androidx.fragment:fragment-testing:$fragment_version")
    testImplementation "io.mockk:mockk:$mockkVersion"
    androidTestImplementation("androidx.test:core-ktx:$test_version_ktx")
    testImplementation("androidx.test.ext:truth:$test_version_ktx")
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    implementation "org.jacoco:org.jacoco.core:$jacoco_version"
//    Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation(platform("com.squareup.okhttp3:okhttp-bom:$ok_http_interceptor_version"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")
//    View Model
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")
    // Import the Firebase BoM
    implementation platform("com.google.firebase:firebase-bom:$bom_version")
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
//    DI
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
//    Hilt test
    androidTestImplementation  "com.google.dagger:hilt-android-testing:$hilt_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
//    Circle Image view
    implementation "de.hdodenhof:circleimageview:$circle_image_view_version"
}
task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        html {
            enabled true
        }
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

    def mainSrc = "$project.projectDir/src/main/java"
    sourceDirectories.from = files([mainSrc])

    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    classDirectories.from = files([javaTree, kotlinTree])

    executionData.from = fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code-coverage/debugAndroidTest/connected/*/coverage.ec"])
}